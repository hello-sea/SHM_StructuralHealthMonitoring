unit Widget;

interface

uses
  System.Classes,
  Winapi.Windows,
  System.SysUtils,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.ExtCtrls,Vcl.StdCtrls,
//  Vcl.TabNotBk,  Vcl.Imaging.pngimage, Vcl.Imaging.jpeg, Vcl.Buttons,

  Math, IniFiles, Model_Seg, Direct2D, D2D1;

type
  DataBase = class
  public
    constructor create;
    function SearchDir(pPath: String; TheType: integer): TStringList;
    var
      FilePath: String;
      PageIndex: integer;   //0~6
      CurPath:Array [0..6] of String ;// 0、2、4、6  为所选文件的路径
                                      // 1、3、5     为所选择的文件名
//      MyTag:Integer;
  end;

{*******************************************************************************}
  TMyTree = class
    public
      constructor Create(Path:String;var MyDataBase:DataBase;Thedepth,TheTag:Integer); overload; //重载一个构造函数
      var
      ChildTree:Array of TMyTree;
      MyLabel:Array of TLabel;
      MyPanel:Array of TPanel;
      show:Boolean;
      slist: TStringList;
      FileName:String;
      Tag,Depth:Integer; // 0: 第0层、1:第1层、2:第2层、3:第3层

  end;


{*******************************************************************************}

 MyCircle = class
 public
     { #.绘圆函数_孔道模型--3个函数 }

    // 该函数由 内院的数目 得到 内圆的圆心
    procedure inner_circle_center(var innercir_cen: array of Tpoint;
      out_px, out_py, out_r, inner_num, inner_r: integer);

    // 绘制整个模型
    procedure Draw_out_inner(PaintBox: TPaintBox; inner_num: integer;
      inner_Staus: array of integer);

    // 该函数用来返回鼠标所在的圆 若没有选中则返回 0   第一个圆返回 1
    Function inner_mouseon_num(out_px, out_py, out_r, x, y,
      inner_num: integer): integer;


  var
  inner_numAll, out_px, out_py, out_r: integer;
  inner_Staus: Array of integer;
 end;



implementation

constructor TMyTree.create(Path:String;var MyDataBase:DataBase;Thedepth,TheTag:Integer);
var
  i:Integer;
begin
  Tag:=TheTag;
  show:=False;
  Depth:=TheDepth;
  TheDepth:=TheDepth+1;
  slist:=MyDataBase.SearchDir(Path,0);//这里0为无效值
  setLength(ChildTree,slist.Count);
    for i := 0 to slist.Count-1 do
    begin
      ChildTree[i]:=TMyTree.Create(Path+'\'+slist[i],MyDataBase,TheDepth,Tag + trunc(Power(100,TheDepth))*(i+1));
      ChildTree[i].FileName:=slist[i];
      ChildTree[i].Tag:=Tag + trunc(Power(100,TheDepth))*(i+1);
    end;
end;

{*******************************************************************************}

constructor DataBase.create;
begin
  FilePath:= 'C:\锚索测量数据库';
  PageIndex:= 0;
//  MyTag:=0;
end;


function DataBase.SearchDir(pPath: String; TheType: integer): TStringList;
var
  found: integer;
//  lStringList: TStringList;
  tempPath: String;
  searchRec: TSearchRec;
begin
  Result := TStringList.Create;
  tempPath := pPath + '\*.*';
  if TheType = 4 then
  begin
    found := FindFirst(tempPath, faAnyFile, searchRec);
    while found = 0 do // 找到了一个文件或目录后
    begin
      // 如果找到的是个目录
      if (searchRec.Attr and faAnyFile ) <> 0 then
      begin
        if (searchRec.Name <> '.') and (searchRec.Name <> '..')and(ExtractFileExt(searchRec.Name)='.seg') then
        begin
          Result.Add(searchRec.Name);
        end;
      end;
      found := FindNext(searchRec);
    end;
  end
  else
  begin
    found := FindFirst(tempPath, faDirectory, searchRec);
    while found = 0 do // 找到了一个文件或目录后
    begin
      // 如果找到的是个目录
      if (searchRec.Attr and faDirectory ) <> 0 then
      begin
        if (searchRec.Name <> '.') and (searchRec.Name <> '..') then
        begin
          Result.Add(searchRec.Name);
        end;
      end;
      found := FindNext(searchRec);
    end;
  end;
end;

{******************************************************************************}



procedure MyCircle.inner_circle_center(var innercir_cen: array of Tpoint;
  out_px, out_py, out_r, inner_num, inner_r: integer);
// 该函数由 内院的数目 得到 内圆的圆心
var
  i: integer;
  out_center: Tpoint; // 定义内外圆圆心
begin
  out_center.x := out_px + out_r;
  out_center.y := out_py + out_r;
  case inner_num of
    1:
      Begin
        innercir_cen[0].x := out_center.x; // 第一个内圆圆心存放在数组 第0个位置
        innercir_cen[0].y := out_center.y;
      End;
    2:
      Begin
        for i := 0 to 1 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 2 * sin(3 * pi / 2 + pi * i));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 2 * cos(3 * pi / 2 + pi * i));
        end;
      End;
    3:
      Begin
        for i := 0 to 2 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 2 * sin(2 * pi * i / 3));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 2 * cos(2 * pi * i / 3));
        end;
      End;
    4:
      Begin
        for i := 0 to 3 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 2 * sin(7 * pi / 4 + pi * i / 2));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 2 * cos(7 * pi / 4 + pi * i / 2));
        end;
      End;
    5:
      Begin
        for i := 0 to 4 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 2 * sin(2 * i * pi / 5));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 2 * cos(2 * i * pi / 5));
        end;
      End;
    6:
      Begin
        for i := 0 to 5 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 2 * sin(i * pi / 3));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 2 * cos(i * pi / 3));
        end;
      End;
    7:
      Begin
        for i := 0 to 5 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 2 * sin(i * pi / 3));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 2 * cos(i * pi / 3));
        end;
        innercir_cen[6].x := out_center.x;
        innercir_cen[6].y := out_center.y;
      End;
    8:
      Begin
        for i := 0 to 7 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r * 2 / 3 * sin(i * pi / 4));
          innercir_cen[i].y := out_center.y -
            Round(out_r * 2 / 3 * cos(i * pi / 4));
        end;

      End;
    9:
      Begin
        for i := 0 to 7 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r * 2 / 3 * sin(i * pi / 4));
          innercir_cen[i].y := out_center.y -
            Round(out_r * 2 / 3 * cos(i * pi / 4));
        end;
        innercir_cen[8].x := out_center.x;
        innercir_cen[8].y := out_center.y;
      End;
    10:
      Begin
        for i := 0 to 7 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r * 2 / 3 * sin(i * pi / 4));
          innercir_cen[i].y := out_center.y -
            Round(out_r * 2 / 3 * cos(i * pi / 4));
        end;
        innercir_cen[8].x := out_center.x - Round(out_r * 1 / 5);
        innercir_cen[8].y := out_center.y;

        innercir_cen[9].x := out_center.x + Round(out_r * 1 / 5);
        innercir_cen[9].y := out_center.y;
      End;
    11:
      Begin
        for i := 0 to 7 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r * 2 / 3 * sin(i * pi / 4));
          innercir_cen[i].y := out_center.y -
            Round(out_r * 2 / 3 * cos(i * pi / 4));
        end;
        for i := 8 to 10 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 3 * sin(pi / 6 + 2 * pi / 3 + i * 2 * pi / 3));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 3 * cos(pi / 6 + 2 * pi / 3 + i * 2 * pi / 3));
        end;
      End;
    12:
      Begin
        for i := 0 to 8 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r * 2 / 3 * sin(i * 2 * pi / 9));
          innercir_cen[i].y := out_center.y -
            Round(out_r * 2 / 3 * cos(i * 2 * pi / 9));
        end;
        for i := 9 to 11 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 3 * sin(pi / 6 + i * 2 * pi / 3));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 3 * cos(pi / 6 + i * 2 * pi / 3));
        end;
      End;
    14:
      Begin
        for i := 0 to 9 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r * 2 / 3 * sin(i * pi / 5));
          innercir_cen[i].y := out_center.y -
            Round(out_r * 2 / 3 * cos(i * pi / 5));
        end;
        for i := 10 to 13 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 3 * sin(pi + pi / 10 + i * pi / 2));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 3 * cos(pi + pi / 10 + i * pi / 2));
        end;
      End;
    15:
      Begin
        for i := 0 to 9 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r * 2 / 3 * sin(i * pi / 5));
          innercir_cen[i].y := out_center.y -
            Round(out_r * 2 / 3 * cos(i * pi / 5));
        end;
        for i := 10 to 14 do
        begin
          innercir_cen[i].x := out_center.x +
            Round(out_r / 3 * sin(i * 2 * pi / 5));
          innercir_cen[i].y := out_center.y -
            Round(out_r / 3 * cos(i * 2 * pi / 5));
        end;
      End;
  end; // 与case 相对的 end
end;

procedure MyCircle.Draw_out_inner(PaintBox: TPaintBox; inner_num: integer;
  inner_Staus: array of integer);
// 参数说明：
// out_px out_py  外圆位置      out_r  外圆半径  inner_num  内圆数目 inner_r  内圆半径 inner_click_num 被选中的的圆的序号(为0表示没有)
// inner_staus 记录每一个圆是否被选中     out_pen_color  外圆线的颜色  inner_pen_color  内圆线的颜色
var
  i: integer;
  innercir_cen: array of Tpoint;
  // out_px,out_py:integer;
  out_r: integer;
  inner_r: integer;
  cvs: TDirect2DCanvas;
Begin
  setLength(innercir_cen, inner_num);

  cvs := TDirect2DCanvas.Create(PaintBox.Canvas,PaintBox.ClientRect);  //D2D1_ANTIALIAS_MODE_ALIASED     D2D1_ANTIALIAS_MODE_PER_PRIMITIVE
  cvs.RenderTarget.SetAntialiasMode(D2D1_ANTIALIAS_MODE_PER_PRIMITIVE );
  cvs.BeginDraw;

  cvs.Pen.Width := 2;
  cvs.Pen.Color := $00656565;//灰色

  cvs.Brush.Color:=$00DCDCDC;
  cvs.RoundRect(0,0,PaintBox.Width,PaintBox.Height,20,20);

  out_px := 2+5;
  out_py := 2+5;
  out_r := PaintBox.Width div 2;
  inner_r := trunc(out_r * 3 / 20);
  cvs.Brush.Color := clBtnFace;
  cvs.Ellipse(out_px, out_py, PaintBox.Width - 2-5, PaintBox.Width - 2-5);
  // 重绘时，刷上背景色，以实现初始化



  cvs.Font.Size := 12;
  cvs.Font.Style := [fsBold];
  cvs.Pen.Width := 3;
  inner_circle_center(innercir_cen, out_px, out_py, out_r, inner_num, inner_r);
  for i := 0 to inner_num - 1 do
  begin
    if inner_Staus[i] = 1 then // 判断被选中的内圆的序号
      cvs.Pen.Color := $007D491F;//绿色
    if inner_Staus[i] = 0 then
      cvs.Pen.Color := $00656565;//灰色
    if inner_Staus[i] = 2 then
      cvs.Pen.Color := clred;
    cvs.Font.Color := cvs.Pen.Color;
    cvs.Ellipse(innercir_cen[i].x - inner_r, innercir_cen[i].y - inner_r,
      innercir_cen[i].x + inner_r, innercir_cen[i].y + inner_r);
    if i < 9 then
      cvs.TextOut(innercir_cen[i].x - Round(inner_r * 2 / 5)+1,
        innercir_cen[i].y - Round(inner_r * 3 / 5), IntToStr(i + 1))
    else
      cvs.TextOut(innercir_cen[i].x - Round(inner_r * 3 / 5)+1,
        innercir_cen[i].y - Round(inner_r * 4 / 6), IntToStr(i + 1));
  End;

  cvs.EndDraw;
  cvs.Free;
  innercir_cen := nil;
End;

Function MyCircle.inner_mouseon_num(out_px, out_py, out_r, x, y,
  inner_num: integer): integer;
// 该函数用来返回鼠标所在的圆 若没有选中则返回 0   第一个圆返回 1
var
  i, inner_r: integer;
  temp_dis: integer; // 暂存鼠标到圆心的距离
  innercir_cen: array of Tpoint;
begin
  inner_r := trunc(out_r * 3 / 20);

  setLength(innercir_cen, inner_num);
  inner_circle_center(innercir_cen, out_px, out_py, out_r, inner_num, inner_r);
  // 得到内圆圆心
  for i := 0 to inner_num - 1 do
  begin
    temp_dis := Round(Sqrt(power((x - innercir_cen[i].x), 2) +
      power((y - innercir_cen[i].y), 2)));
    if temp_dis <= inner_r then
    begin
      // Form1.Caption:='鼠标在第'+inttostr(i+1)+'个圆上';
      Result := i + 1;
      break;
    end
    else if temp_dis > inner_r then
    begin
      // Form1.Caption:='内外圆程序';
      Result := 0; // 如果鼠标没在圆上
    end;
  end;

end;


end.
